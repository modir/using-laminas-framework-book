# Приложение В. Введение в Twitter Bootstrap {#bootstrap}

Twitter Bootstrap (или просто Bootstrap) - это популярный CSS-фреймворк, позволяющий
сделать ваш сайт профессионально выглядящем и привлекательным внешне, даже если вы
не обладаете продвинутыми навыками дизайна. В этом приложении вы найдете вводную информацию
о Bootstrap, а также примеры его использования.

## Обзор файлов Bootstrap

Исходный код компонентов фремворка Bootstrap распределен по множеству CSS-файлов.
Как известно, загрузка большого количества маленьких файлов обычно медленнее, чем
загрузка одного большого. По этой причине таблицы стилей CSS Bootstrap "конкатенированы" (объединены)
специальным инструментом и распространяются в виде единственного файла *bootstrap.css*.

Однако, у файла *bootstrap.css* есть и недостаток: он содержит много символов (пробелы,
разрывы строки, комментарии и т.д.), ненужные для выполнения кода и лишь впустую тратящие
пропускную способность сети при скачивании файла, что увеличивает время загрузки страницы.
Для решения этой проблемы используется *минификация*.

Минификация - это процесс удаления всех ненужных символов из исходного кода
без изменения его функциональности. Минифицированный файл Bootstrap называется
*bootstrap.min.css*.

T> Как правило, рекомендуется использовать мнифицированный файл, особенно
T> в производственной среде, потому что это уменьшает время загрузки страницы. Однако,
T> если вы планируете разбираться в коде Bootstrap, чтобы понять, как он работает, лучше
T> используйте обычный (не минифицированный) файл или вообще скачайте оригинальные исходные
T> файлы (еще не конкатенированные).

Давайте детальнее посмотрим на файлы, хранящиеся внутри каталога *APP_DIR/public* и его
подкаталогов (рисунок В.1).

![Рисунок В.1. Структура каталога APP_DIR/public](../en/images/bootstrap/bootstrap_files.png)

Каталог *css* содержит таблицы стилей CSS:

* Файлы *bootstrap.css* и *bootstrap.min.css* - соответственно обычная и минифицированная
  версия Bootstrap.

* Файл *bootstrap-theme.css* - опциональный файл темы, используется для совершенствования
  внешнего вида сайта. *bootstrap-theme.min.css* - его минифицированная версия.

* Файл *style.css* - таблица стилей, которую вы можете использовать (а также расширить), чтобы
  определить свои собственные CSS-правила - они будут применены поверх правил Bootstrap.
  Таким образом вы можете кастомизировать внешний вид вашего веб-приложения.

* Также вы можете заметить различные файлы с расширением .map - это MAP-файлы [^map],
  которые могут быть использованы для отладки CSS-кода.

[^map]: После конкатенации и минификации CSS-код сложен для чтения и отладки.
        MAP-файл (карта кода) позволяет вернуть минифицированный файл к его обычному виду.

Каталог *fonts* содержит несколько файлов (например, *glyphicons-halflings-regular.svg*) нужных
Bootstrap для рендеринга иконок (так называемых глиф-иконок, glyphicons). Их можно использовать для улучшения
внешнего вида кнопок и выпадающих меню.

Подкаталог *APP_DIR/public/js* содержит расширения JavaScript фреймворка Bootstrap. Они
реализованы как плагины jQuery:

* Файл *bootstrap.js* содержит JavaScript-код расширений Bootstrap.
  Файл *bootstrap.min.js* - его минифицированная версия.

* Так как расширения Bootstrap реализованы как плагины jQuery, потребуется
  последняя версия библиотеки jQuery. Поэтому каталог *js* включает
  файл библиотеки jQuery *jquery-2.2.4.min.js*.

## Система сеток

На большинстве веб-сайтов содержимое должно быть организовано в табличную структуру
со строками и столбцами. На рисунке В.2 представлен пример лэйаута типичного сайта:
блок заголовка с логотипом, боковая панель слева, содержимое страницы в центре,
рекламная панель в правой части и футер (или подвал) сайта внизу. Эти блоки организованы
в сетку (grid), хотя ячейки сетки различаются по ширине (некоторые ячейки могут охватывать
несколько столбцов).

![Рисунок В.2. Лэйаут типичного сайта](../en/images/bootstrap/typical_grid.png)

Bootstrap предоставляет простую систему сеток для лэйаутов, с помощью
которой легко организовать содержимое ваших веб-страниц в строки и столбцы.

Каждая строка может содержать до 12 столбцов [^cols] (рисунок C.3). Ширина столбца
свободно изменяется и зависит от ширины контейнера сетки. Высота столбца может
варьироваться в зависимости от высоты содержимого ячейки. Пространство между столбцами
занимает 30 пикселей (по 15 с каждой стороны столбца).

[^cols]: Необязательно иметь 12 столбцов для одной строки, их может быть меньше.
         В таком случае пространство справа от последнего столбца останется пустым.

![Рисунок В.3. Система сеток Bootstrap](../en/images/bootstrap/bootstrap_grid.png)

Столбцы могут быть соединены, то есть, одна ячейка может занимать пространство нескольких столбцов.
Например, на рисунке В.3 верхняя строка сетки состоит из 12 столбцов, и каждая ячейка
занимает один столбец. В нижней строке первая ячейка охватывает 2 столбца, вторая и третья - по 4
столбца каждая и четвертая - тоже 2 столбца (в сумме получаем 12 столбцов).

Q> **Почему сетка Bootstrap состоит всего из 12 столбцов?**
Q>
Q> Возможно по причине того, что 12 столбцов достаточно для большинства веб-сайтов. При работе с
Q> многогранной сеткой с большим количеством столбцом, будет тяжелее посчитать диапазоны столбцов без калькулятора.
Q> К счастью, Bootstrap позволяет вам настроить количество столбцов каждой строки, так что у вас может быть столько
Q> столбцов, сколько захотите.

### Задание сетки

Чтобы организовать элементы страницы в сетку, первым делом нужно определить
контейнер, добавив элемент `<div>` с CSS-классом `.container`.

Для добавления к сетке новой строки используйте элемент `<div>` с CSS-классом `.row`,
как показано на образце ниже:

{line-numbers=off, lang=text}
~~~
<div class="container">
  <div class="row">
  ...
  </div>
</div>
~~~

Для добавления столбцов используйте элементы `<div>` с CSS-классами от `.col-md-1`
до `.col-md-12`. Номер в имени класса указывает, сколько столбцов будет охватывать каждая
ячейка сетки:

{line-numbers=off, lang=text}
~~~
<div class="container">
  <div class="row">
    <div class="col-md-1">Cell 1</div>
    <div class="col-md-5">Cell 2</div>
    <div class="col-md-6">Cell 3</div>
  </div>
</div>
~~~

В этом примере у нас есть три ячейки. Первая имеет ширину в 1 столбец (она использует класс `.col-md-1`),
вторая охватывает пять столбцов сетки (класс `.col-md-5`), а третья - 6 (класс `.col-md-6`).

В качестве другого примера, давайте определим лэйаут, который мы видели на рисунке В.2.
У него есть заголовок (логотип занимает 3 столбца), главная область содержимого (7 столбцов),
боковая панель (3 столбца), рекламная панель (2 столбца) и футер. Ниже представлен HTML-код
для этого лэйаута:

{line-numbers=off, lang=text}
~~~
<div class="container">
  <!-- Заголовок -->
  <div class="row">
    <div class="col-md-3">Logo</div>
    <div class="col-md-9"></div>
  </div>
  <!-- Тело -->
  <div class="row">
    <div class="col-md-3">Sidebar</div>
    <div class="col-md-7">Page Content</div>
    <div class="col-md-2">Ads</div>
  </div>
  <!-- Футер -->
  <div class="row">
    <div class="col-md-12">Page Footer</div>
  </div>
</div>
~~~

### Смещение столбцов

На реальных веб-страницах сетка иногда должна содержать пустые пространства.
Их можно добиться смещением ячеек вправо с помощью CSS-классов от `.col-md-offset-1` до `.col-md-offset-12`.
Номер в названии класса указывает, сколько столбцов должно быть пропущено.

В качестве примера рассмотрим рисунок В.4:

![Рисунок В.4. Смещения столбцов](../en/images/bootstrap/offset-grid.png)

Эта сетка имеет три ячейки, последние две из них смещены вправо, создавая
тем самым пустые пространства. Для определения сетки из рисунка В.4 воспользуйтесь
следующим HTML-кодом:

{line-numbers=of, lang=text}
~~~
<div class="container">
  <div class="row">
    <div class="col-md-2">Cell 1</div>
    <div class="col-md-4 col-md-offset-2">Cell 2</div>
    <div class="col-md-2 col-md-offset-2">Cell 3</div>
  </div>
</div>
~~~

### Вложенные сетки

Вы можете создавать лэйауты сложным страниц с использованием вложенных сеток (см. рисунок В.5).
Для этого добавьте новый элемент `<div>`, содержащий класс `.row` и набор столбцов
`.col-md-*` внутри существующего столбца `.col-md-*`.

![Рисунок В.5. Вложенная сетка](../en/images/bootstrap/nested-grid.png)

Ниже приведен код для сетки из рисунка В.5:

{line-numbers=off, lang=text}
~~~
<div class="container">
  <div class="row">
    <div class="col-md-2">Cell 1</div>
    <div class="col-md-8">
      <!-- Вложенная сетка -->
      <div class="row">
        <div class="col-md-4">Cell 21</div>
        <div class="col-md-4">Cell 22</div>
      </div>
      <div class="row">
        <div class="col-md-4">Cell 23</div>
        <div class="col-md-4">Cell 24</div>
      </div>
    </div>
    <div class="col-md-2">Cell 3</div>
  </div>
</div>
~~~

В примере выше мы определили сетку, состоящую из трех ячеек (помеченных серым цветом):
первая ячейка охватывает 2 столбца, вторая - 8 столбцов, а третья - 2 столбца. Затем мы
помещаем вложенные строки сетки внутрь второй ячейки. Так как родительская ячейка охватывает
8 столбцов, дочерняя сетка также будет состоять из 8 столбцов.

### Концепция "Mobile First"

Twitter Bootstrap поддерживает различные устройства, от широких дисплеев
до планшетов и мобильных телефонов. По этой причине сетка лэйаута может адаптироваться
под различные разрешения экрана.

T> Это также называется *отзывчивостью* или концепцией "mobile first" ("сначала мобильные").
T> Bootstrap следует этой концепции, то есть, ваш веб-сайт можно будет просматривать и использовать
T> на экране любого размера. Однако, это не освобождает вас от кропотливой подготовки и планирования лэйаута.

Эта адаптация выполняется двумя методами. Во-первых, ширина столбцов сетки может изменяться. Например,
если вы увеличиваете окно браузера, сетка автоматически изменит размер, чтобы заполнить пространство целиком.

Но что случится, если ваша веб-страница слишком широка для дисплея? Чтобы увидеть скрытую часть,
посетителю сайта нужно будет прокрутить страницу вправо. Для мобильных телефонов и других устройств
с низким разрешением это не самый лучший подход. Вместо этого, лучше, чтобы сетка становилась "сложенной"
при определенной ширине экрана. Когда сетка сложена, ее строки преобразуются, и ячейки в итоге располагаются
одна над другой (см. рисунок В.6).

Чтобы лучше управлять тем, когда сетка становится "сложенной", Bootstrap предоставляет вам дополнительные
CSS-классы: от `.col-xs-1` до `col-xs-12` ("xs" означает "extra-small"  - очень маленькие устройства, т.е., телефоны),
от `.col-sm-1` до `.col-sm-12` ("sm" расшифровывается как "small devices" - маленькие устройства, т.е., планшеты)
и классы от `.col-lg-1` до `.col-lg-12` (large devices - большие устройства, т.е., широкие дисплеи). Эти классы
можно использовать вместе с классами .col-md-1` -- `.col-md-12`, которые мы уже использовали ("md" означает "medium
devices" - средние устройства, т.е., настольные компьютеры).

Например, классы `.col-md-*` определяют сетку, которая будет "сложенной" при ширине экрана ниже
992 пикселей и горизонтальной для более широких экранов. Классы `.col-sm-*` сделают сетку
"сложенной" при ширине экрана ниже 778 пикселей и горизонтальной при значении выше. Класс `.col-xs-*`
всегда делает сетку горизонтальной, вне зависимости от ширины экрана.

![Рисунок В.6. Сетка адаптируется под размер экрана](../en/images/bootstrap/stacked-grid.png)

В таблице В.1 представлена сводка доступных классов сетки и их контрольных точек.

{title="Таблица В.1. CSS-классы для задания сетки"}
|--------------------------------|---------------------------------------------------------------|
| *Имя класса*                   | *Точка "складывания" сетки*                                   |
|--------------------------------|---------------------------------------------------------------|
| `.col-xs-*`                     | <768px                                                       |
|--------------------------------|---------------------------------------------------------------|
| `.col-sm-*`                     | >=768px                                                      |
|--------------------------------|---------------------------------------------------------------|
| `.col-md-*`                     | >=992px                                                      |
|--------------------------------|---------------------------------------------------------------|
| `.col-lg-*`                     | >=1200px                                                     |
|--------------------------------|---------------------------------------------------------------|

I> Система сеток Bootstrap сильно упрощает процесс расположения элементов
I> на веб-странице. Однако, использовать эту систему не обязательно. Иногда,
I> например, вам может понадобиться намного более сложный лэйаут, и простой системы сеток
I> будет недостаточно. В таком случае можно создать свой собственный лэйаут с помощью
I> HTML-элементов `<table>` и `<div>` и использовать его.

## Компоненты интерфейса Bootstrap

В этом разделе мы вкратце разберем полезные компоненты интерфейса, предоставляемые
Twitter Bootstrap. Мы планируем использовать некоторые из этих компонентов в последующих
примерах, и этот раздел должен дать вам представление о том, как можно использовать эти
виджеты на своих веб-сайтах.

### Панель навигации

Панель навигации (navbar) обычно расположена в верхней части сайта и содержит ссылки на основные страницы
вроде *Home*, *Download*, *Support*, *About*, и др. Twitter Bootstrap
предоставляет красивую визуализацию этой панели (см. рисунок В.7):

![Рисунок В.7. Навигационная панель](../en/images/bootstrap/navbar.png)

Как видно из рисунка, панель навигации, как правило, имеет заголовок (там может
находиться название вашей организации) и ссылки на основные страницы.
Чтобы добавить на страницу панель навигации, используйте следующий HTML-код:

{line-numbers=on, lang=text}
~~~
<nav class="navbar navbar-default" role="navigation">
  <div class="navbar-header">
    <a class="navbar-brand" href="#">Hello World</a>
  </div>
  <ul class="nav navbar-nav">
    <li><a href="#">Home</a></li>
    <li><a href="#">Download</a></li>
    <li><a href="#">Support</a></li>
    <li><a href="#">About</a></li>
  </ul>
</nav>
~~~

В строке 1 мы использовали элемент `<nav>`, который содержит всю информацию о навигационной панели.
Связанный CSS-класс `navbar.` определяется Bootstrap и предоставляет базовый внешний вид панели
навигации. Класс `.navbar-default` указывает тему "по умолчанию" для панели.

Опциональный HTML-атрибут [role](http://www.w3.org/TR/xhtml-role/) позволяет
снабжать элементы страницы семантической информацией, извлекаемой машиной,
о назначении элемента. В этом примере атрибут сообщает, что элемент `<nav>` используется для навигации.

В строках 2-4 мы определяем область заголовка навигационной панели, где находится гиперссылка *Hello World*.
Гиперссылка названия организации обычно указывает на его главную страницу. Класс `.navbar-brand`
этой гиперссылки улучшает внешний вид текста.

В строках 5-10 мы определяем навигационные ссылки для страниц *Home*, *Download*, *Support* и *About*.
Эти ссылки организованы в неупорядоченный список `<ul>`. CSS-классы `.nav` и `.navbar-nav`
этого списка помещают его элементы в строку, а также устанавливают выделенное состояние элемента.

#### Выпадающее меню

С помощью панели навигации Bootstrap можно использовать выпадающее меню (dropdown) как
элемент навигации. Например, если раздел вашего сайта *Support* можно разделить на
страницы *Documentation* и *Help* , их можно реализовать как выпадающий список (см. рисунок В.8).

![Рисунок В.8. Панель навигации с выпадающим меню](../en/images/bootstrap/navbar_with_dropdown.png)

Выпадающее меню можно определить заменив элемент *Support* из предыдущего примера следующим образом:

{line-numbers=on, lang=text}
~~~
<li class="dropdown">
  <a href="#" class="dropdown-toggle" data-toggle="dropdown">
     Support <b class="caret"></b>
  </a>
  <ul class="dropdown-menu">
    <li><a href="#">Documentation</a></li>
    <li><a href="#">Help</a></li>
  </ul>
</li>
~~~

В этом коде мы используем элемент `<li>` с классом `.dropdown`, отвечающим
за выпадающее меню (строка 1). В строках 2-4 элемент `<a>` определяет гиперссылку
для того, чтобы показывать, когда меню скрыто (за текстом *Support* следует курсор в виде треугольника).

Когда пользователь сайта кликает на гиперссылку, появляется выпадающее меню (строки 5-8).
Неупорядоченный список, устанавливаемый тегом `<ul>`, с классом `.dropdown-menu` определяют
его внешний вид. Выпадающее меню содержит два элемента: гиперссылки *Documentation* и *Help*.

#### Сжимающаяся панель навигации

Как и система сеток, навигационная панель поддерживает различные разрешения экранов.
На устройства с низким разрешением панель может быть сжата (collapsed), как показано на рисунке В.9.

![Figure C.9. Сжатая панель навигации](../en/images/bootstrap/navbar_collapsed.png)

Как видите, в этом режиме отображается только заголовок панели навигации, а три горизонтальные полосы
справа обозначают кнопку-переключатель. Нажав на нее, можно раскрыть элементы навигационной панели.

Определить такого рода панель навигации можно следующим образом:

{line-numbers=on, lang=text}
~~~
<nav class="navbar navbar-default" role="navigation">
  <!-- Название организации и переключатель группируются для лучшего отображения на дисплеях мобильных -->
  <div class="navbar-header">
    <button type="button" class="navbar-toggle" data-toggle="collapse"
            data-target=".navbar-ex1-collapse">
      <span class="sr-only">Toggle navigation</span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </button>
    <a class="navbar-brand" href="#">Hello World</a>
  </div>

  <!-- Собираем навигационные ссылки, формы и другое содержимое для кнопки-переключателя -->
  <div class="collapse navbar-collapse navbar-ex1-collapse">
    <ul class="nav navbar-nav">
      <li><a href="#">Home</a></li>
      <li><a href="#">Download</a></li>
      <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
          Support <b class="caret"></b>
        </a>
        <ul class="dropdown-menu">
          <li><a href="#">Documentation</a></li>
          <li><a href="#">Help</a></li>
        </ul>
      </li>
      <li><a href="#">About</a></li>
    </ul>
  </div><!-- /.navbar-collapse -->
</nav>
~~~

В строках 3-12 мы определяем заголовок панели, который будет отображаться
независимо от разрешения экрана. Заголовок содержит кнопку-переключатель с
тремя горизонтальными полосами, а также текст "Toggle navigation".

Ту часть меню, которая может сжиматься, вы можете увидеть в строках 15-30, где мы описываем
размещение ссылок навигации и пунктов выпадающего меню.

#### Обратный стиль навигационной панели

Панель навигации можно отобразить с использованием двух стандартных "тем": темы *по умолчанию* (мы видели ее выше)
и *обратной (inverse)* темы. В обратной теме элементы панели навигации отображаются в темных цветах (рисунок В.10).
Вы могли видеть такую панель навигации в демонстрации Laminas Skeleton Application.

![Рисунок В.10. Обратный стиль навигационной панели](../en/images/bootstrap/navbar_inverse.png)

Обратную тему можно определить просто заменив класс `.navbar-default` элемента `<nav>`
на класс `.navbar-inverse`:

{line-numbers=off, lang=text}
~~~
<nav class="navbar navbar-inverse" role="navigation">
  ...
</nav>
~~~

### Навигационные цепочки

Навигационные цепочки (или "хлебные крошки" - от англ. Breadcrumbs) - полезный компонент интерфейса, который может использоваться
вместе с панелью навигации, чтобы дать пользователю понять, в какой области сайта он находится в данный момент (рисунок В.11).

![Рисунок В.11. Навигационные цепочки](../en/images/bootstrap/breadcrumbs.png)

На этом рисунке представлен пример навигационных цепочек для системы документации нашего сайта.
Так как страницы документации могут иметь глубокие уровни вложенности, навигационные цепочки сообщают
пользователю, на какой странице он сейчас находится. Таким образом, пользователь не потеряется и сможет
вернуться на страницы, которые посещал ранее.

Для определения навигационных цепочек используйте упорядоченный список `<ol>` с классом `.breadcrumb`:

{line-numbers=off, lang=text}
~~~
<ol class="breadcrumb">
  <li><a href="#">Home</a></li>
  <li><a href="#">Support</a></li>
  <li class="active">Documentation</li>
</ol>
~~~

### Пагинация

Компонент пагинации (pagination) полезен, когда вам нужно отобразить длинный список элементов.
При отображении такого списка на одной единственной странице, пользователю приходилось бы
пролистывать страницу вниз несколько раз, чтобы добраться до нижней его части. Чтобы избежать
этого, разбейте содержимое на страницы и используйте компонент пагинации для навигации между этими
страницами (рисунок В.12):

![Рисунок В.12. Пагинация](../en/images/bootstrap/pagination.png)

Для определения пагинации, как на рисунке выше, воспользуйтесь следующим HTML-кодом:

{line-numbers=off, lang=text}
~~~
<ul class="pagination">
  <li><a href="#">&laquo; Newest</a></li>
  <li><a href="#">&lt; Newer</a></li>
  <li><a href="#">1</a></li>
  <li><a href="#">2</a></li>
  <li><a href="#">3</a></li>
  <li><a href="#">4</a></li>
  <li><a href="#">5</a></li>
  <li><a href="#">Older &gt;</a></li>
  <li><a href="#">Oldest &raquo</a></li>
</ul>
~~~

### Кнопки и глиф-иконки

Twitter Bootstrap предоставляет красивую визуализацию кнопок (рисунок В.13).

![Рисунок В.13. Кнопки](../en/images/bootstrap/btn_save_cancel.png)

Для создания кнопок, как на этом рисунке, используйте код:

{line-numbers=off, lang=text}
~~~
<p>
  <button type="button" class="btn btn-primary">Save</button>
  <button type="button" class="btn btn-default">Cancel</button>
</p>
~~~

В этих строках мы используем CSS-класс `.btn`, чтобы присвоить кнопке ее стиль
отображения. Кроме того, мы используем класс `.btn-primary` для кнопки *Save* (которая,
как правило, является основной кнопкой на форме) или класс `btn-default` для обычной
(не основной) кнопки *Cancel*.

Чтобы можно было лучше выразить значение кнопки, Bootstrap предоставляет несколько
дополнительных классов: `.btn-success` (для кнопок, применяющих какие-то изменения на странице),
`.btn-info` (для информационных кнопок), `btn-warning` (для кнопок с, возможно, нежелательным эффектом)
и `.btn-danger` (для кнопок, которые могут привести к необратимым последствиям).
Пример использования этих стилей кнопок показан ниже:

{line-numbers=off, lang=text}
~~~
<p>
  <button type="button" class="btn btn-default">Default</button>
  <button type="button" class="btn btn-primary">Primary</button>
  <button type="button" class="btn btn-success">Success</button>
  <button type="button" class="btn btn-info">Info</button>
  <button type="button" class="btn btn-warning">Warning</button>
  <button type="button" class="btn btn-danger">Danger</button>
</p>
~~~

Рисунок В.14 показывает получившийся внешний вид кнопок:

![Рисунок В.14. Стили кнопок](../en/images/bootstrap/btn_colors.png)

Bootstrap включает 180 иконок (называемых глиф-иконками, glyphicons), которые можно использовать вместе с кнопками,
выпадающими меню, навигационными ссылками и т.д. Чтобы добавить иконку на кнопку, используйте следующий код:

{line-numbers=off, lang=text}
~~~
<p>
  <button type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-plus"></span> Create
  </button>
  <button type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-pencil"></span> Edit
  </button>
  <button type="button" class="btn btn-default">
      <span class="glyphicon glyphicon-remove"></span> Delete
  </button>
</p>
~~~

В этом фрагменте кода мы определили простую панель инструментов, содержащую три кнопки:
*Create*, *Edit* и *Delete*. На каждую кнопку мы поместили иконку с помощью
элемента `<span>`. У этого элемента должно быть два класса:
класс `.glyphicon`, общий для всех иконок, и второй класс - класс конкретной иконки.
В этом примере мы использовали класс `.glyphicon-plus` для кнопки *Create*,
`.glyphicon-pencil` для кнопки `Edit` и `.glyphicon-remove` для кнопки *Delete*.
Результат нашей работы показан на рисунке В.15.

![Рисунок В.15. Кнопки с иконками](../en/images/bootstrap/btn_icons.png)

Вы можете изменять размеры кнопок, указав класс `.btn-lg` для больших, `btn-sm` для
маленьких, а `.btn-xs` для очень маленьких кнопок. Например, на рисунке В.16, показана
большая кнопка *Download*.

![Рисунок В.16. Большая кнопка](../en/images/bootstrap/btn_lg.png)

Для определения такой кнопки, используйте следующий HTML-код:

{line-numbers=off, lang=text}
~~~
<button type="button" class="btn btn-success btn-lg">
  <span class="glyphicon glyphicon-download"></span> Download
</button>
~~~

## Кастомизация Bootstrap
В завершении введения в Twitter Bootstrap, мы опишем, как можно модифицировать некоторые
аспекты фреймворка Bootstrap. Вы можете настроить внешний вид Bootstrap, используя
[страницу кастомизации](http://getbootstrap.com/customize/) сайта фреймворка (рисунок В.17).

![Рисунок В.17. Страница кастомизации Bootstrap](../en/images/bootstrap/bootstrap_customize.png)

На этой странице вы можете выбрать, какие исходные файлы Bootstrap включить в "объединенный"
файл *bootstrap.css*. Если какой-либо набор функций вам не нужен, его можно исключить из этого
файла, тем самым уменьшив сетевой трафик и время загрузки страницы.
Также вы можете убрать из файла *bootstrap.js* неиспользуемые компоненты JavaScript-кода.

Помимо этого вы можете выбрать различные параметры CSS, например, цвет фона, базовый цвет текста,
семейство шрифтов и т.д. - доступно более сотни настраиваемых параметров.

I> Кастомизация CSS возможна потому, что исходные файлы Bootstrap хранятся в формате LESS [^less]
I> который позволяет определить переменные параметры (вроде `@bodyBackground` или `@textColor`).
I> После определения параметров файлы LESS компилируются в обычные CSS-файлы, минифицируются
I> и становятся доступными для загрузки.

После того, как закончите выбор параметров, пролистайте страницу вниз
и нажмите кнопку *Compile and Download* (скомпилировать и скачать).
В итоге вы скачаете архив *bootstrap.zip*, содержащий все настроенные вами
файлы Bootstrap (как обычные, так и минифицрованные файлы CSS и JS, а также
глиф-иконки).

[^less]: LESS - это динамический язык стилей, расширяющий стандартный CSS и поддерживающий такие
         возможности как переменные, примеси (добавление всех свойств CSS-класса другому CSS-классу),
         вложенные куски кода, арифметические операции и функции.

## Выводы

Twitter Bootstrap - это CSS-фреймворк, разработанный для упрощения дизайна
ваших веб-страниц. Он предоставляет привлекательные стили для типографии,
форм, кнопок, изображений и т.д., что делает возможным создание профессионально
выглядящего сайта в считанные минуты.

Система сеток, предоставляемая Bootstrap, позволяет организовать элементы
на веб-странице в сетку со строками и столбцами. Эта сетка может адаптироваться
под различные разрешения экрана, что делает страницу одинаково легкочитаемой на
мобильных устройствах, планшетах, настольных компьютерах и широких экранах.

Twitter Bootstrap также предоставляет полезные компоненты веб-интерфейса, такие
как выпадающие меню, панели навигации, навигационные цепочки и др. Расширения
JavaScript, которые идут в комплекте с фреймворком, делают эти компоненты интерактивными.

Bootstrap поставляется с Laminas Skeleton Application, так что вы можете использовать
его готовую версию. Либо можно скачать последнюю версию со страницы проекта и настроить
Bootstrap удобным вам образом.
